services:
  db:
    image: postgres:17.4
    container_name: pgsql-db
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    command: --max_connections=200
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    volumes:
      - "pgsql-data:/var/lib/postgresql/data"
    deploy:
      resources:
        limits:
          cpus: 1.0
          memory: 1G
        reservations:
          cpus: 0.5
          memory: 512M
  go-app:
    build:
      context: .
    container_name: go-app
    ports:
      - "8080:8080"
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/"]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: 0.5
          memory: 1G
        reservations:
          cpus: 0.25
          memory: 512M

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    networks:
      - app-network
    depends_on:
      - go-app
    ports:
      - "443:443"
      - "80:80"

networks:
  app-network:
    driver: bridge

volumes:
  pgsql-data:
